{"version":3,"sources":["components/values.js","components/InputField.js","App.js","serviceWorker.js","index.js"],"names":["characteristics","tooShort","isCommon","contains","symbol","number","mixedCase","commonPass","InputField","props","state","score","color","pass","hasSameCase","toUpperCase","toLowerCase","hasNum","test","hasSymbol","includes","length","this","getColor","console","log","setState","className","style","backgroundColor","initialValues","password","onSubmit","obj","checkPass","id","name","placeholder","type","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAAMA,EAAkB,CACtBC,UAAU,EACVC,UAAU,EACVC,SAAU,CACRC,QAAQ,EACRC,QAAQ,EACRC,WAAW,IAITC,EAAa,CACjB,WACA,WACA,YACA,WACA,OACA,WCgIaC,E,kDAzIb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,KACPC,MAAO,OACPZ,gBAAiB,IALF,E,sDASTa,GACR,GAAa,KAATA,EAAJ,CAEA,IAAID,EACFD,EAAQ,EAENG,EACAD,IAASA,EAAKE,eAAiBF,IAASA,EAAKG,cAC/CC,EAAS,aAAaC,KAAKL,GAC3BM,EAAY,qDAA+CD,KAAKL,GAChEX,EAAWK,EAAWa,SAASP,GAC/BZ,EAAWY,EAAKQ,OAAS,EAEvBnB,GACFS,IACAX,EAAgBE,UAAW,GACtBF,EAAgBE,UAAW,EAC9BD,GACFU,IACAX,EAAgBC,UAAW,GACtBD,EAAgBC,UAAW,EAC9Ba,GACFH,IACAX,EAAgBG,SAASG,WAAY,GAChCN,EAAgBG,SAASG,WAAY,EACvCa,EAGEnB,EAAgBG,SAASC,QAAS,GAFvCO,IACAX,EAAgBG,SAASC,QAAS,GAE/Ba,EAGEjB,EAAgBG,SAASE,QAAS,GAFvCM,IACAX,EAAgBG,SAASE,QAAS,GAGpCO,EAAQU,KAAKC,SAASZ,GACtBa,QAAQC,IAAIZ,EAAMb,GAClBsB,KAAKI,SAAS,CAAEd,QAAOZ,kBAAiBW,a,+BAGjCA,GACP,OAAQA,GACN,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,OACT,QACE,MAAO,U,+BAIH,IAAD,OAEP,OADAa,QAAQC,IAAIH,KAAKZ,MAAMV,iBAErB,yBACE2B,UAAU,gBACVC,MAAO,CAAEC,gBAAiBP,KAAKZ,MAAME,QAErC,kBAAC,IAAD,CACEkB,cAAe,CAAEC,SAAU,IAC3BC,SAAU,SAACC,GAAD,OAAS,EAAKC,UAAUD,EAAIF,YAEtC,kBAAC,IAAD,CAAMJ,UAAU,QACd,wDACA,kBAAC,IAAD,CAAOQ,GAAG,WAAWC,KAAK,WAAWC,YAAY,aACjD,6BACA,6BACA,4BAAQV,UAAU,WAAWW,KAAK,UAAlC,WAMJ,4BACuB,MAApBhB,KAAKZ,MAAMC,MACR,UAAYW,KAAKZ,MAAMC,MACvB,oDAEgB,IAArBW,KAAKZ,MAAMC,MAAc,yDAAqC,GAC9DW,KAAKZ,MAAMV,gBAAgBE,SAC1B,uFAEA,GAEDoB,KAAKZ,MAAMV,gBAAgBC,SAC1B,uIAKA,GAEoB,OAArBqB,KAAKZ,MAAMC,OACXW,KAAKZ,MAAMV,gBAAgBG,SAASG,UAMnC,GALA,2GAOoB,OAArBgB,KAAKZ,MAAMC,OACXW,KAAKZ,MAAMV,gBAAgBG,SAASE,OAGnC,GAFA,oFAIoB,OAArBiB,KAAKZ,MAAMC,OACXW,KAAKZ,MAAMV,gBAAgBG,SAASC,OAMnC,GALA,2I,GA9HemC,IAAMC,WCShBC,MAVf,WACE,OACE,yBAAKd,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.ad80bc37.chunk.js","sourcesContent":["const characteristics = {\r\n  tooShort: false,\r\n  isCommon: false,\r\n  contains: {\r\n    symbol: true,\r\n    number: true,\r\n    mixedCase: true,\r\n  },\r\n};\r\n\r\nconst commonPass = [\r\n  \"12345678\",\r\n  \"password\",\r\n  \"Password!\",\r\n  \"p4ssw0rd\",\r\n  \"pass\",\r\n  \"letmein\",\r\n];\r\n\r\nexport { characteristics, commonPass };\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport { characteristics, commonPass } from \"./values\";\r\n\r\nclass InputField extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      score: null,\r\n      color: \"#888\",\r\n      characteristics: {},\r\n    };\r\n  }\r\n\r\n  checkPass(pass) {\r\n    if (pass === \"\") return;\r\n\r\n    let color = \"#888\",\r\n      score = 5;\r\n\r\n    let hasSameCase =\r\n        pass === pass.toUpperCase() || pass === pass.toLowerCase(),\r\n      hasNum = /.*[0-9].*/g.test(pass),\r\n      hasSymbol = /.*[?!\"£$%^&*|/\\\\\\][(){}<>,.:;#~`¬=_+\\-@'].*/g.test(pass),\r\n      isCommon = commonPass.includes(pass),\r\n      tooShort = pass.length < 8;\r\n\r\n    if (isCommon) {\r\n      score--;\r\n      characteristics.isCommon = true;\r\n    } else characteristics.isCommon = false;\r\n    if (tooShort) {\r\n      score--;\r\n      characteristics.tooShort = true;\r\n    } else characteristics.tooShort = false;\r\n    if (hasSameCase) {\r\n      score--;\r\n      characteristics.contains.mixedCase = false;\r\n    } else characteristics.contains.mixedCase = true;\r\n    if (!hasSymbol) {\r\n      score--;\r\n      characteristics.contains.symbol = false;\r\n    } else characteristics.contains.symbol = true;\r\n    if (!hasNum) {\r\n      score--;\r\n      characteristics.contains.number = false;\r\n    } else characteristics.contains.number = true;\r\n\r\n    color = this.getColor(score);\r\n    console.log(pass, characteristics);\r\n    this.setState({ color, characteristics, score });\r\n  }\r\n\r\n  getColor(score) {\r\n    switch (score) {\r\n      case 0:\r\n        return \"#A00\";\r\n      case 1:\r\n        return \"#B33\";\r\n      case 2:\r\n        return \"#F55\";\r\n      case 3:\r\n        return \"#BB5\";\r\n      case 4:\r\n        return \"#8B3\";\r\n      case 5:\r\n        return \"#3A3\";\r\n      default:\r\n        return \"#888\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.characteristics);\r\n    return (\r\n      <div\r\n        className=\"passContainer\"\r\n        style={{ backgroundColor: this.state.color }}\r\n      >\r\n        <Formik\r\n          initialValues={{ password: \"\" }}\r\n          onSubmit={(obj) => this.checkPass(obj.password)}\r\n        >\r\n          <Form className=\"form\">\r\n            <label>Enter your password: </label>\r\n            <Field id=\"password\" name=\"password\" placeholder=\"Password\" />\r\n            <br />\r\n            <br />\r\n            <button className=\"myButton\" type=\"submit\">\r\n              Check\r\n            </button>\r\n          </Form>\r\n        </Formik>\r\n\r\n        <h1>\r\n          {this.state.score != null\r\n            ? \"Score: \" + this.state.score\r\n            : \"Try out a password, and we'll test its strength!\"}\r\n        </h1>\r\n        {this.state.score === 5 ? <h1>Perfect score! Well done!</h1> : \"\"}\r\n        {this.state.characteristics.isCommon ? (\r\n          <p>- Your password is too common. It will be easy to guess.</p>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {this.state.characteristics.tooShort ? (\r\n          <p>\r\n            - Your password is too short. This means it is unsecure, and will\r\n            probably not be allowed by most sites.\r\n          </p>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {this.state.score !== null &&\r\n        !this.state.characteristics.contains.mixedCase ? (\r\n          <p>\r\n            - Your password does not contain a mixture of upper- and lower-case\r\n            letters.\r\n          </p>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {this.state.score !== null &&\r\n        !this.state.characteristics.contains.number ? (\r\n          <p>- Your password does not contain at least one number.</p>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {this.state.score !== null &&\r\n        !this.state.characteristics.contains.symbol ? (\r\n          <p>\r\n            - Your password does not contain any symbols. This helps to prevent\r\n            others from guessing your password.\r\n          </p>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport InputField from \"./components/InputField\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <InputField />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}