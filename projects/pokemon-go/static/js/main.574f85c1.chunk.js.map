{"version":3,"sources":["components/firebase/firebaseAuth.js","components/CodeInput.js","components/CodeList.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","CodeInput","props","handleSubmit","code","isValid","console","log","setState","validity","sendToDB","test","length","setColorStyle","state","error","collection","add","timestamp","Date","className","style","backgroundColor","this","initialValues","onSubmit","obj","id","name","placeholder","type","React","Component","CodeList","codeList","get","then","querySnapshot","docs","forEach","doc","includes","data","map","App","useState","Type","setType","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAaAA,IAASC,cAVY,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKFR,UAASS,YC+DTC,EAxEA,kDACb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,aAAe,SAACC,GACTA,IAED,EAAKC,QAAQD,IACfE,QAAQC,IAAI,wBACZ,EAAKC,SAAS,CAAEC,SAAU,UAC1B,EAAKC,SAASN,KAEd,EAAKI,SAAS,CAAEC,SAAU,YAC1BH,QAAQC,IAAI,sCAhBG,EAoBnBF,QAAU,SAACD,GAET,MADc,aACDO,KAAKP,IAAyB,KAAhBA,EAAKQ,QAtBf,EAyBnBC,cAAgB,WACd,OAAK,EAAKC,MAAML,SACY,UAAxB,EAAKK,MAAML,UAAyB,EAAKK,MAAMC,MAC5C,OAD0D,OADhC,SA1BhB,EA+BnBL,SAAW,SAACN,GACVJ,EAAUgB,WAAW,SAASC,IAAI,CAChCb,KAAMA,EACNc,UAAW,IAAIC,QAhCjB,EAAKL,MAAQ,CACXL,SAAU,GACVM,OAAO,GAJQ,EADN,qDAuCH,IAAD,OACP,OACE,sBACEK,UAAU,sBACVC,MAAO,CAAEC,gBAAiBC,KAAKV,iBAFjC,UAIE,cAAC,IAAD,CACEW,cAAe,CAAEpB,KAAM,IACvBqB,SAAU,SAACC,GAAD,OAAS,EAAKvB,aAAauB,EAAItB,OAF3C,SAIE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOuB,GAAG,OAAOC,KAAK,OAAOC,YAAY,SACzC,wBAAQC,KAAK,SAAb,sBAGHP,KAAKT,MAAML,SACc,UAAxBc,KAAKT,MAAML,UACY,IAArBc,KAAKT,MAAMC,MACT,gDAEA,qEAGF,wDAGF,8DAjEK,GAAiBgB,IAAMC,W,QC8BvBC,EAjCD,kDACZ,WAAY/B,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXoB,SAAU,IAEZlC,EACGgB,WAAW,SACXmB,MACAC,MAAK,SAACC,GACLA,EAAcC,KAAKC,SAAQ,SAACC,GACtB,EAAK1B,MAAMoB,SAASO,SAASD,EAAIE,SAErC,EAAKlC,SAAS,CACZ0B,SAAS,GAAD,mBAAM,EAAKpB,MAAMoB,UAAjB,CAA2BM,EAAIE,OAAOtC,eAbrC,EADP,qDAsBV,OADAE,QAAQC,IAAIgB,KAAKT,MAAMoB,UAErB,sBAAKd,UAAU,qBAAf,UACE,sDACCG,KAAKT,MAAMoB,SAASS,KAAI,SAACvC,GACxB,OAAO,4BAAIA,cA1BP,GAAiB2B,IAAMC,WCoBtBY,MAhBf,WAAgB,IAAD,EACWC,oBAAS,GADpB,mBACNC,EADM,KACAC,EADA,KAGb,OACE,sBAAK3B,UAAU,aAAf,UACE,8BACE,oBAAI4B,QAAS,kBAAMD,GAASD,IAA5B,yBAGF,cAAC,EAAD,IACA,cAAC,EAAD,QCLSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.574f85c1.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBNxW81QdG-QG1cdgzwmLsV1qaB1B2tE7c\",\r\n  authDomain: \"pokemon-go-site.firebaseapp.com\",\r\n  projectId: \"pokemon-go-site\",\r\n  storageBucket: \"pokemon-go-site.appspot.com\",\r\n  messagingSenderId: \"200332795378\",\r\n  appId: \"1:200332795378:web:e28e96001caae4d38c9f6b\",\r\n  measurementId: \"G-WDV6TXMSG5\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase.firestore();\r\n","import React from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\n\r\nimport \"../style.css\";\r\nimport firestore from \"./firebase/firebaseAuth\";\r\n\r\nconst CodeInput = class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validity: \"\",\r\n      error: false,\r\n    };\r\n  }\r\n  handleSubmit = (code) => {\r\n    if (!code) return;\r\n\r\n    if (this.isValid(code)) {\r\n      console.log(\"This is a valid code\");\r\n      this.setState({ validity: \"valid\" });\r\n      this.sendToDB(code);\r\n    } else {\r\n      this.setState({ validity: \"invalid\" });\r\n      console.log(\"Invalid, please check your code\");\r\n    }\r\n  };\r\n\r\n  isValid = (code) => {\r\n    const check = /(^[0-9]*$)/;\r\n    return check.test(code) && code.length === 12;\r\n  };\r\n\r\n  setColorStyle = () => {\r\n    if (!this.state.validity) return \"#fffa\";\r\n    if (this.state.validity === \"valid\" && !this.state.error) return \"#8f5\";\r\n    return \"#f34\";\r\n  };\r\n\r\n  sendToDB = (code) => {\r\n    firestore.collection(\"codes\").add({\r\n      code: code,\r\n      timestamp: new Date(),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"container inputArea\"\r\n        style={{ backgroundColor: this.setColorStyle() }}\r\n      >\r\n        <Formik\r\n          initialValues={{ code: \"\" }}\r\n          onSubmit={(obj) => this.handleSubmit(obj.code)}\r\n        >\r\n          <Form>\r\n            <Field id=\"code\" name=\"code\" placeholder=\"Code\" />\r\n            <button type=\"submit\">Add</button>\r\n          </Form>\r\n        </Formik>\r\n        {this.state.validity ? (\r\n          this.state.validity === \"valid\" ? (\r\n            this.state.error === false ? (\r\n              <p>Code Submitted!</p>\r\n            ) : (\r\n              <p>There was an error, please try again</p>\r\n            )\r\n          ) : (\r\n            <p>Invalid Code, try again</p>\r\n          )\r\n        ) : (\r\n          <p>Enter your code above!</p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CodeInput;\r\n","import React from \"react\";\r\nimport firestore from \"./firebase/firebaseAuth\";\r\n\r\nconst CodeList = class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      codeList: [],\r\n    };\r\n    firestore\r\n      .collection(\"codes\")\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.docs.forEach((doc) => {\r\n          if (this.state.codeList.includes(doc.data())) return;\r\n\r\n          this.setState({\r\n            codeList: [...this.state.codeList, doc.data().code],\r\n          });\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.codeList);\r\n    return (\r\n      <div className=\"container listArea\">\r\n        <p>Other people's codes:</p>\r\n        {this.state.codeList.map((code) => {\r\n          return <p>{code}</p>;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CodeList;\r\n","import \"./App.css\";\n\nimport CodeInput from \"./components/CodeInput\";\nimport CodeList from \"./components/CodeList\";\n\nimport { useState } from \"react\";\n\nfunction App() {\n  const [Type, setType] = useState(false);\n\n  return (\n    <div className=\"App-header\">\n      <div>\n        <h1 onClick={() => setType(!Type)}>click me!</h1>\n      </div>\n\n      <CodeInput />\n      <CodeList />\n      {/*Type ? <CodeInput /> : <CodeList />*/}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}